{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8MAGMA,EAAe,CACjBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,qBACNC,SAAU,cA2BHE,EAfO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARvC,GAAKH,EAAQ,EACfD,EAAM,EAAI,SAAW,SAEpBA,EAAM,EAAI,SAAW,UAM5B,EAA2BP,EAAaS,GAAhCP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAEd,OACA,sBAAKS,UAAS,yBAAoBH,GAAlC,UACA,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC5BVU,EAAU,SAACP,GACb,OACI,qBAAKM,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAf,SACKN,EAAMQ,aAMvBD,EAAQE,aAAe,CACvBD,QAAS,cAGMD,QCVTG,E,4MACFC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,uDAGnC,WAAqB,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,2BAIrD,WACI,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAChC,0CAAaqB,KAAKX,MAAMC,iBAG9BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAChC,cAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGnC,cAAC,EAAD,CAASO,QAAQ,qC,oBAGxB,WACI,OAAO,8BAAMc,KAAKC,sB,GAxBRC,IAAMC,WA6BxBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.e8763254.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: \"Let\\'s Hit the Beach!\",\r\n        iconName: 'sun'\r\n    },\r\n    winter: {\r\n        text: \"Burr, it\\'s Chilly!\",\r\n        iconName: 'snowflake'\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\nif (month > 2 && month < 9) {\r\n   return lat > 0 ? 'summer' : 'winter';\r\n} else {\r\n    return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season];\r\n    \r\n    return (\r\n    <div className={`season-display ${season}`}>\r\n    <i className={`icon-left massive ${iconName} icon`} />\r\n    <h1>{text}</h1>\r\n    <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n\r\n    );\r\n    }\r\n\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className='ui active dimmer'>\r\n            <div className='ui big text loader'>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\nmessage: 'Loading...'\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\n\r\nclass App extends React.Component {\r\n    state = { lat: null, errorMessage: '' };\r\n\r\n\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => this.setState({ lat: position.coords.latitude }),\r\n            err => this.setState({ errorMessage: err.message })\r\n            );\r\n    }\r\n\r\nrenderContent() {\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n        return <div>Error: {this.state.errorMessage}</div>\r\n    }\r\n\r\n    if (!this.state.errorMessage && this.state.lat){\r\n        return <SeasonDisplay lat={this.state.lat} />\r\n    }\r\n\r\n    return <Spinner message='Please accept location request' />;\r\n}\r\n\r\n    render() {\r\n        return <div>{this.renderContent()}</div>\r\n}\r\n}\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}